{
  "swagger": "2.0",
  "info": {
    "title": "Selling Partner API for Uploads",
    "description": "The Selling Partner API for Uploads provides operations that support uploading files. These operations support the Selling Partner APIs for Feeds and EasyShip, for example.",
    "version": "v1",
    "contact": {
      "name": "Selling Partner API Test Support",
      "url": "https://github.com/amzn/amazon-marketplace-api-sdk/issues",
      "email": "marketplaceapitest@amazon.com"
    },
    "license": {
      "name": "Amazon Software License",
      "url": "https://aws.amazon.com/asl/"
    }
  },
  "host": "sellingpartnerapi-na.amazon.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/uploads/v1/uploadDestinations": {
      "post": {
        "description": "Creates an upload destination and returns the required information to upload to that destination.",
        "operationId": "createUploadDestination",
        "tags": [
          "uploads"
        ],
        "responses": {
          "201": {
            "description": "Successfully created an upload destination.",
            "headers": {
              "x-amzn-requestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              },
              "Location": {
                "description": "The URI of the created destination.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "payload": {
                  "uploadDestinationId": "5d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                  "url": "https://s3.amazonaws.com/buyer-seller-messaging-test-draft-attachment-namarketplace/%2F067/5d4e42b5-1d6e-44e8-a89c-2abfca0625bb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190701T214102Z&X-Amz-SignedHeaders=content-md5%3Bhost%3Bx-amz-server-side-encryption&X-Amz-Expires=900&X-Amz-Credential=AKIAW5VUA47ENEOYT7RC%2F20190701%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=d4f85c5f1a32a788a8d54e3f00a2a08af45be5b83551cdd81c82ae353dfcdfd4",
                  "headers": {
                    "Content-MD5": "5d41402abc4b2a76b9719d911017c592",
                    "x-amz-server-side-encryption": "aws:kms"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketplaceIds",
            "type": "array",
            "in": "query",
            "required": true,
            "description": "Marketplace identifiers. Specifies the marketplace where the upload will be available. NOTE: Accepts only a single marketplace.",
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          {
            "name": "Content-MD5",
            "description": "An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.",
            "type": "string",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/uploads/v1/uploadDestinations/feeds/{feedType}": {
      "post": {
        "description": "Creates an upload destination for the specified feed type and returns the required information to upload to that destination.",
        "operationId": "createUploadDestinationForFeed",
        "tags": [
          "uploads"
        ],
        "responses": {
          "201": {
            "description": "Successfully created an upload destination for a feed.",
            "headers": {
              "x-amzn-requestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "payload": {
                  "uploadDestinationId": "5d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                  "url": "https://s3.amazonaws.com/buyer-seller-messaging-test-draft-attachment-namarketplace/%2F067/5d4e42b5-1d6e-44e8-a89c-2abfca0625bb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190701T214102Z&X-Amz-SignedHeaders=content-md5%3Bhost%3Bx-amz-server-side-encryption&X-Amz-Expires=900&X-Amz-Credential=AKIAW5VUA47ENEOYT7RC%2F20190701%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=d4f85c5f1a32a788a8d54e3f00a2a08af45be5b83551cdd81c82ae353dfcdfd4",
                  "encryptionDetails": {
                    "standard": "AES",
                    "initializationVector": "a6 2f 22 25 bf 70 bf ac cb c7 f1 ef 2a 39 78 36",
                    "key": "key"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "feedType": {
                      "value": "_POST_PRODUCT_DATA_"
                    },
                    "Content-Type": {
                      "value": "text/tab-separated-values"
                    },
                    "Content-Length": {
                      "value": "256"
                    }
                  }
                },
                "response": {
                  "payload": {
                    "uploadDestinationId": "3d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_101__POST_PRODUCT_DATA_%2BKEY%3DFeed_101%2BMode%3DCBC%2BINITVEC%3D8f+6c+cc+56+0d+50+a2+d0+31+ec+80+be+f2+6a+1d+0a",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "8f 6c cc 56 0d 50 a2 d0 31 ec 80 be f2 6a 1d 0a",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {"parameters": {
                  "feedType": {
                    "value": "_POST_INVENTORY_AVAILABILITY_DATA_"
                  }
                }},
                "response": {
                  "payload": {
                    "uploadDestinationId": "4d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_106__POST_INVENTORY_AVAILABILITY_DATA_%2BKEY%3DFeed_106%2BMode%3DCBC%2BINITVEC%3D11+6a+7a+e6+87+2b+66+b9+02+7b+56+5b+f2+a7+06+da",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "11 6a 7a e6 87 2b 66 b9 02 7b 56 5b f2 a7 06 da",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {"parameters": {
                  "feedType": {
                    "value": "_POST_PAYMENT_ADJUSTMENT_DATA_"
                  }
                }},
                "response": {
                  "payload": {
                    "uploadDestinationId": "5d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_109__POST_PAYMENT_ADJUSTMENT_DATA_%2BKEY%3DFeed_109%2BMode%3DCBC%2BINITVEC%3D1b+ea+49+4b+9a+a9+a1+e9+81+6d+61+29+29+d1+bb+ea",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "1b ea 49 4b 9a a9 a1 e9 81 6d 61 29 29 d1 bb ea",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {"parameters": {
                  "feedType": {
                    "value": "_POST_FLAT_FILE_ORDER_ACKNOWLEDGEMENT_DATA_"
                  }
                }},
                "response": {
                  "payload": {
                    "uploadDestinationId": "6d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_120__POST_FLAT_FILE_ORDER_ACKNOWLEDGEMENT_DATA_%2BKEY%3DFeed_120%2BMode%3DCBC%2BINITVEC%3De2+c9+ff+e0+3b+25+b9+0c+99+14+6f+6a+83+26+ad+76",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "e2 c9 ff e0 3b 25 b9 0c 99 14 6f 6a 83 26 ad 76",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {"parameters": {
                  "feedType": {
                    "value": "_POST_FLAT_FILE_FBA_CREATE_INBOUND_PLAN_"
                  }
                }},
                "response": {
                  "payload": {
                    "uploadDestinationId": "7d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_2653__POST_FLAT_FILE_FBA_CREATE_INBOUND_PLAN_%2BKEY%3DFeed_2653%2BMode%3DCBC%2BINITVEC%3D69+e4+c6+03+87+08+92+df+23+04+83+c9+40+3b+cf+75",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "69 e4 c6 03 87 08 92 df 23 04 83 c9 40 3b cf 75",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {
                  "parameters": {
                    "feedType": {
                      "value": "_POST_FLAT_FILE_PRICEANDQUANTITYONLY_UPDATE_DATA_"
                    }
                  }
                },
                "response": {
                  "payload": {
                    "uploadDestinationId": "8d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_306__POST_FLAT_FILE_PRICEANDQUANTITYONLY_UPDATE_DATA_%2BKEY%3DFeed_306%2BMode%3DCBC%2BINITVEC%3D33+75+e4+f8+48+94+49+82+ad+81+f1+48+f2+0b+ff+2f",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "33 75 e4 f8 48 94 49 82 ad 81 f1 48 f2 0b ff 2f",
                      "key": "key"
                    }
                  }
                }
              },
              {
                "request": {"parameters": {
                  "feedType": {
                    "value": "_RFQ_UPLOAD_FEED_"
                  }
                }},
                "response": {
                  "payload": {
                    "uploadDestinationId": "9d4e42b5-1d6e-44e8-a89c-2abfca0625bb",
                    "url": "https://d34o8swod1owfl.cloudfront.net/Feed_80800__RFQ_UPLOAD_FEED_%2BKEY%3DFeed_80800%2BMode%3DCBC%2BINITVEC%3Da8+12+e5+45+dc+b9+8f+2e+f9+8e+0f+89+27+62+c4+98",
                    "encryptionDetails": {
                      "standard": "AES",
                      "initializationVector": "a8 12 e5 45 dc b9 8f 2e f9 8e 0f 89 27 62 c4 98",
                      "key": "key"
                    }
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "feedType": {
                      "value": "_BAD_FEED_"
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "400",
                      "message": "Invalid input",
                      "details": "Invalid input"
                    }
                  ]
                }
              }
            ]
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference ID.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateUploadDestinationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "feedType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "_POST_PRODUCT_DATA_",
              "_POST_INVENTORY_AVAILABILITY_DATA_",
              "_POST_PRODUCT_OVERRIDES_DATA_",
              "_POST_PRODUCT_PRICING_DATA_",
              "_POST_PRODUCT_IMAGE_DATA_",
              "_POST_PRODUCT_RELATIONSHIP_DATA_",
              "_POST_FLAT_FILE_INVLOADER_DATA_",
              "_POST_FLAT_FILE_LISTINGS_DATA_",
              "_POST_FLAT_FILE_BOOKLOADER_DATA_",
              "_POST_FLAT_FILE_CONVERGENCE_LISTINGS_DATA_",
              "_POST_FLAT_FILE_PRICEANDQUANTITYONLY_UPDATE_DATA_",
              "_POST_UIEE_BOOKLOADER_DATA_",
              "_POST_STD_ACES_DATA_",
              "_POST_ORDER_ACKNOWLEDGEMENT_DATA_",
              "_POST_PAYMENT_ADJUSTMENT_DATA_",
              "_POST_ORDER_FULFILLMENT_DATA_",
              "_POST_INVOICE_CONFIRMATION_DATA_",
              "_POST_EXPECTED_SHIP_DATE_SOD_",
              "_POST_FLAT_FILE_ORDER_ACKNOWLEDGEMENT_DATA_",
              "_POST_FLAT_FILE_PAYMENT_ADJUSTMENT_DATA_",
              "_POST_FLAT_FILE_FULFILLMENT_DATA_",
              "_POST_EXPECTED_SHIP_DATE_SOD_FLAT_FILE_",
              "_POST_FULFILLMENT_ORDER_REQUEST_DATA_",
              "_POST_FULFILLMENT_ORDER_CANCELLATION_REQUEST_DATA_",
              "_POST_FBA_INBOUND_CARTON_CONTENTS_",
              "_POST_FLAT_FILE_FULFILLMENT_ORDER_REQUEST_DATA_",
              "_POST_FLAT_FILE_FULFILLMENT_ORDER_CANCELLATION_REQUEST_DATA_",
              "_POST_FLAT_FILE_FBA_CREATE_INBOUND_PLAN_",
              "_POST_FLAT_FILE_FBA_UPDATE_INBOUND_PLAN_",
              "_POST_FLAT_FILE_FBA_CREATE_REMOVAL_",
              "_POST_ENHANCED_CONTENT_DATA_",
              "_RFQ_UPLOAD_FEED_",
              "_POST_EASYSHIP_DOCUMENTS_"
            ]
          },
          {
            "name": "Content-Type",
            "description": "The content type of the feed. Possible values: text/tab-separated-values; charset=iso-8859-1, text/tab-separated-values; charset=Shift_JIS, text/xml",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "Content-Length",
            "description": "The content length of the feed in bytes.",
            "type": "integer",
            "in": "query",
            "required": true
          }
        ]
      }
    }
  },
  "definitions": {
    "CreateUploadDestinationResponse": {
      "description": "The response schema for the createUploadDestination operation.",
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/UploadDestination"
        },
        "errors": {
          "$ref": "#/definitions/ErrorList"
        }
      }
    },
    "UploadDestination": {
      "description": "Information about an upload destination.",
      "type": "object",
      "properties": {
        "uploadDestinationId": {
          "description": "The unique identifier to be used by APIs that reference the upload destination.",
          "type": "string"
        },
        "url": {
          "description": "The URL to which to upload the file.",
          "type": "string"
        },
        "encryptionDetails": {
          "$ref": "#/definitions/EncryptionDetails"
        },
        "headers": {
          "description": "The headers to include in the upload request.",
          "type": "object",
          "properties": {}
        }
      }
    },
    "EncryptionDetails": {
      "description": "Encryption details for the required client-side encryption of the upload.",
      "type": "object",
      "properties": {
        "standard": {
          "description": "The encryption standard required prior to upload.",
          "type": "string",
          "enum": [
            "AES"
          ]
        },
        "initializationVector": {
          "type": "string",
          "description": "The vector to encrypt the content using Cipher Block Chaining (CBC)."
        },
        "key": {
          "type": "string",
          "description": "The encryption key used to encrypt the content."
        }
      }
    },
    "ErrorList": {
      "description": "A list of error responses returned when a request is unsuccessful.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      }
    },
    "Error": {
      "description": "Error response returned when the request is unsuccessful.",
      "properties": {
        "code": {
          "description": "An error code that identifies the type of error that occurred.",
          "type": "string"
        },
        "message": {
          "description": "A message that describes the error condition in a human-readable form.",
          "type": "string"
        },
        "details": {
          "description": "Additional details that can help the caller understand or fix the issue.",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    }
  }
}